@page "/meal/{Id:int}"

@inject IBellyBoxDataService BellyBoxData
@inject ICartDataService CartService

<div>
	@if (hasErrors || meal == null)
	{
		<Alert Status="Alert.AlertStatus.Danger">
			<p>The product you're looking for could not be retreived.</p>
	    </Alert>
	}
	else
	{
		<article>
			<img src="@meal.ImageUrl" />
			<div>
				<h2>@meal.Name</h2>
				<p class="description">
					@meal.Description
				</p>
				<AddToCart Meal="@meal" OnAddToCart="HandleAddToCart"></AddToCart> 
				<h2>Ingredients</h2>
				<ul>
					@foreach (Ingredient ingredient in meal.Ingredients)
					{
						<li>@ingredient.Name</li>
					}
				</ul>
				<h3>Nutrition per serving</h3>
				<p class="calories">
					<span>Calories</span>
					<span>@meal.Calories Cal</span>
				</p>
				<p class="servings">
					<span>Servings</span>
					<span>@meal.Servings</span>
				</p>
				<h4>Sensitivities</h4>
				<div class="sensitivities">
					@foreach (Tag tag in meal.Tags)
					{
						<Pill Text="@tag.Text" />
					}
				</div>
			</div>
		</article>
	}

</div>

@code {
	[CascadingParameter]
	public CartState CustomerCart { get; set; }

	[Parameter]
	public int Id { get; set; }

	Meal? meal;

	bool hasErrors;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			meal = await BellyBoxData.GetMealById(Id);
		}
		catch
		{
			hasErrors = true;
		}
	}

	public async Task HandleAddToCart(Meal meal)
	{
		var cartItem = await CartService.AddCartItem(CustomerCart.CartId, CustomerCart.OwnerId, meal);

		CustomerCart.UpdateCart(cartItem); 
	}
}
