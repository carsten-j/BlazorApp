@page "/meal/{Id:int}"

@inject HttpClient _http;

<div>
    @if (hasErrors)
    {
        <Alert Status="Alert.AlertStatus.Danger">
            <p>The product you're looking for could not be retreived.</p>
        </Alert>
    }
    else if (meal is null)
    {
        <div>
            Data not loaded
        </div>
    }
    else
    {
        <article>
            <img src="@meal.ImageUrl" />
            <div>
                <h2>
                    @meal.Name
                </h2>
                <p class="description">
                    @meal.Description
                </p>
                <h2>Ingredients</h2>
                <ul>
                    @foreach (var ingredient in meal.Ingredients)
                    {
                        <li>
                            @ingredient.Name;
                        </li>
                    }
                 </ul>
                <h3>Nutrition per serving</h3>
                <p class="calories">
                    <span>Calories</span>
                    <span>
                        @meal.Calories Cal
                    </span>
                </p>
                <p class="servings">
                    <span>Servings</span>
                    <span>
                        @meal.Servings
                    </span>
                </p>
                <h4>Sensitivities</h4>
                <div class="sensitivities">
                    @foreach (var tag in meal.Tags)
                    {
                        <Pill Text="@tag.Text"></Pill>
                    }
                </div>
            </div>
        </article>
    }
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private bool hasErrors = false;

    private Meal meal = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var response = await _http.GetAsync($"api/meal/{Id}");
            response.EnsureSuccessStatusCode();

            meal = await response.Content.ReadFromJsonAsync<Meal>();
        }
        catch
        {
            hasErrors = true;
        }

        await base.OnInitializedAsync();
    }
}
